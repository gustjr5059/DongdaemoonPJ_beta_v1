# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # 추가로 필요한 규칙을 여기에 나열합니다.
    # print 함수 사용을 피하도록 권장합니다.
    # print 함수는 간단한 디버깅 목적으로 사용되지만,
    # 실제 코드에서는 로깅 프레임워크를 사용하는 것이 좋습니다.
    avoid_print: true

    # 가능한 경우 const 생성자를 사용하도록 권장합니다.
    # const 생성자는 객체를 컴파일 타임에 상수로 만들어
    # 메모리 사용을 최적화하고 성능을 향상시킵니다.
    prefer_const_constructors: true

    # 모든 함수와 메서드에 반환 타입을 명시적으로 선언하도록 권장합니다.
    # 반환 타입을 명시하면 코드의 가독성이 높아지고,
    # 유지보수와 타입 안정성에 도움이 됩니다.
    always_declare_return_types: true

    # 모든 오버라이드된 메서드에 @override 어노테이션을 추가하도록 권장합니다.
    # @override 어노테이션은 메서드가 부모 클래스에서 상속되었음을 명확히 나타내어
    # 코드 가독성을 높이고, 실수로 메서드를 잘못 오버라이드하는 것을 방지합니다.
    annotate_overrides: true
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
